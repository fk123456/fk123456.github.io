<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java多线程核心编程一</title>
    <url>/2021/02/23/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E4%B8%80/</url>
    <content><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ol>
<li>进程<ol>
<li>举例来说，就说windows任务管理器里面的一个个exe程序。</li>
<li>术语来说，操作系统结构的基础，是一个程序执行的过程，它是系统进行资源分配和调度的一个独立单元。</li>
</ol>
</li>
<li>线程<ol>
<li>举例来说，QQ.exe是一个进行，里面运行的视频线程、下载文件线程、数据传输线程等。</li>
<li>术语来说：进程中独立运行的子任务。</li>
</ol>
</li>
<li>为什么要使用多线程<ol>
<li>单线程环境：任务1用时10秒，任务2用时1秒，则总耗时为11秒。</li>
<li>多线程环境：CPU在任务1和任务2之间来回切换，任务2不必等10秒再运行，系统效率得到提升。</li>
</ol>
</li>
</ol>
<h2 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h2><ol>
<li>下面显示的是一个叫作main线程在执行main()方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()); &lt;!-- main --&gt;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<ol>
<li><p>继承Thread类</p>
<ol start="2">
<li>可以发现run方法执行的时间比较晚，这也说明了代码运行结果与代码执行顺序或调用顺序是无关的。</li>
<li>调用了线程的start()方法，而不是run()方法。此过程就是通知线程规划器，等待调研线程对象的run()方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start(); &lt;!-- hahaha --&gt;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 运行结束! --&gt;</span><br><span class="line">&lt;!-- hahaha --&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现Runnable接口</p>
<ol>
<li><p>我们可以发现Runnable接口，没有start()方法，所以我们把Runnable对象放到Thread类去执行。其实Thread类的构造方法支持传入一个Runnable接口，而Thread类实现了Runnable接口，所以可以这样执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(myThread);</span><br><span class="line">        thread.start(); &lt;!-- hahaha --&gt;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 运行结束! --&gt;</span><br><span class="line">&lt;!-- hahaha --&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Thread</span>(<span class="title">Runnable</span> <span class="title">target</span>) </span>&#123;</span><br><span class="line">  init(<span class="keyword">null</span>, target, <span class="string">&quot;Thread- &quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Thread-currentThread-getName-和This-getName"><a href="#Thread-currentThread-getName-和This-getName" class="headerlink" title="Thread.currentThread().getName()和This.getName()"></a>Thread.currentThread().getName()和This.getName()</h2><ol>
<li><p>举例1:</p>
<ol>
<li><p>currentThread()方法：返回代码段正在被哪个线程调用的信息</p>
</li>
<li><p>构造方法被Thread调用，run方法被Thread调用</p>
</li>
<li><p>Debug可以发现，new MyThread()时，该类的构造方法就执行了，所以分别为main和Thread-0，真正执行到start()方法时，run()方法被CPU调度到分别打印为Thread-1和Thread-0，这是因为Thread类的构造方法默认拼接”Thread-“ 加一个数字，从0开始。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- Thread-<span class="number">1</span> --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- main --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(); &lt;!-- 此处执行构造方法Thread-<span class="number">0</span> --&gt;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(myThread); &lt;!-- Thread-<span class="number">1</span> --&gt;</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>举例2:</p>
<ol>
<li><p>构造方法被main方法调用，run方法被MyThread调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- main --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>举例 3：设置name</p>
<ol>
<li><p>构造方法还是一样的结果</p>
</li>
<li><p>分别给MyThread和Thread设置名字，run方法被Thread类调用，所以打印为Thread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- Thread --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- MyThread --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- main --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(); &lt;!-- 此处执行构造方法Thread-<span class="number">0</span> --&gt;</span><br><span class="line">        myThread.setName(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(myThread); &lt;!-- Thread-<span class="number">1</span> --&gt;</span><br><span class="line">        thread.setName(<span class="string">&quot;Thread&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>举例4:</p>
<ol>
<li><p>构造方法还是一样的结果</p>
</li>
<li><p>run方法被MyThread调用，而且设置了name，所以都为MyThread</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- MyThread --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- MyThread --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()); &lt;!-- main --&gt;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()); &lt;!-- Thread-<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread(); &lt;!-- 此处执行构造方法Thread-<span class="number">0</span> --&gt;</span><br><span class="line">        myThread.setName(<span class="string">&quot;MyThread&quot;</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="实例变量与线程安全"><a href="#实例变量与线程安全" class="headerlink" title="实例变量与线程安全"></a>实例变量与线程安全</h2><ol>
<li><p>线程类中的实例变量针对其他线程可以有共享与不共享之分，这是判断线程安全与否的重要标志。</p>
</li>
<li><p>不共享实例变量</p>
<ol>
<li><p>因为分别创建了三个MyThread对象，而且他们各自调用自己内部的count互不干涉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            System.out.println(<span class="string">&quot;由&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;计算 count= &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread a = <span class="keyword">new</span> MyThread(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        MyThread b = <span class="keyword">new</span> MyThread(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        MyThread c = <span class="keyword">new</span> MyThread(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        a.start(); &lt;!-- <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> --&gt;</span><br><span class="line">        b.start(); &lt;!-- <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> --&gt;</span><br><span class="line">        c.start(); &lt;!-- <span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>共享实例变量</p>
<ol>
<li><p>多个线程访问同一个变量，就可能造成线程安全问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            System.out.println(<span class="string">&quot;由&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;计算 count= &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        Thread c = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">        c.start();</span><br><span class="line">        &lt;!-- 由B计算 count= <span class="number">2</span> --&gt;</span><br><span class="line">        &lt;!-- 由B计算 count= <span class="number">1</span> --&gt;</span><br><span class="line">        &lt;!-- 由C计算 count= <span class="number">2</span> --&gt;</span><br><span class="line">        &lt;!-- 由A计算 count= <span class="number">2</span> --&gt;</span><br><span class="line">        &lt;!-- 由B计算 count= <span class="number">0</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上述代码可以看到线程的另一个构造方法，接受一个Runnable接口，和name。该name就为线程的名称等效与setName()</p>
</li>
</ol>
</li>
<li><p>共享实例变量（线程安全做法）</p>
<ol>
<li><p>在 run方法前加入synchronized关键字，使多个线程在执行run方法时，排队进行处理。</p>
</li>
<li><p>当某个线程调用run方法前，先判断当前方法有没有被上锁，如果没有被锁上则进入该代码，否则不断的尝试去拿这把锁，直到拿到为止。</p>
</li>
<li><p>synchronized可以在任意对象及方法上加锁，而加锁的这段代码称为”互斥区”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处不要使用循环</span></span><br><span class="line">        count--;</span><br><span class="line">        System.out.println(<span class="string">&quot;由&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;计算 count= &quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        Thread c = <span class="keyword">new</span> Thread(myThread, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">        c.start();</span><br><span class="line">        &lt;!-- 由A计算 count= <span class="number">4</span> --&gt;</span><br><span class="line">        &lt;!-- 由C计算 count= <span class="number">3</span> --&gt;</span><br><span class="line">        &lt;!-- 由B计算 count= <span class="number">2</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="Thread类部分API解释"><a href="#Thread类部分API解释" class="headerlink" title="Thread类部分API解释"></a>Thread类部分API解释</h2><ol>
<li><p>isAlive()</p>
<ol>
<li>判断当前线程是否处于活动状态</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run = &quot;</span> + <span class="keyword">this</span>.isAlive()); &lt;!-- <span class="keyword">true</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(myThread.isAlive()); &lt;!-- <span class="keyword">false</span> --&gt;</span><br><span class="line">        myThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); &lt;!-- 模拟网络延迟 --&gt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(myThread.isAlive()); &lt;!-- <span class="keyword">false</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sleep()</p>
<ol>
<li>在指定的毫秒数内让当前”正在执行的线程”休眠。</li>
</ol>
</li>
<li><p>getId()</p>
<ol>
<li>取得线程的唯一标识</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        System.out.println(myThread.getId()); &lt;!-- <span class="number">9</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>yeild()</p>
<ol>
<li>放弃当前的CPU资源，将它让给其他的任务去占用CPU执行，但是放弃的时间不确定，可能刚刚放弃，马上又获得CPU时间片。</li>
<li>下面的代码分别为不执行yiled方法和执行yield方法，可以看到耗时明显不同</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间 = &quot;</span> + (end - begin)); &lt;!-- <span class="number">9</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            count += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;花费时间 = &quot;</span> + (end - begin)); &lt;!-- <span class="number">18</span> --&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><ol>
<li><p>interrupt()方法：</p>
<ol>
<li>该方法并不像for+break语句那样，马上就停止循环，而是在当前线程中打一个停止的标记，并不是真正的停止线程。</li>
</ol>
</li>
<li><p>判断线程是否是停止状态</p>
<ol>
<li>interrupted(); 测试当前线程是否已经中断<ol>
<li>该方法具有清除状态的功能，如果连续调用两次则返回为false</li>
</ol>
</li>
<li>isInterrupted(); 测试现场是否已经中断</li>
</ol>
</li>
<li><p>异常法停止线程</p>
<ol>
<li>可以看到，interrupt() 方法被执行到之后，run方法的interrupted()检测到被打断了，则抛出异常，for循环后面的代码不会继续执行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(interrupted()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;我已经被停止了！我要退出了！&quot;</span>);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我在for下面&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入到run方法的catch中了&quot;</span> + e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">            myThread.start();</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            myThread.interrupt();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i &#x3D; 39060</span><br><span class="line">i &#x3D; 39061</span><br><span class="line">i &#x3D; 39062</span><br><span class="line">end!</span><br><span class="line">我已经被停止了！我要退出了！</span><br><span class="line">进入到run方法的catch中了java.lang.InterruptedException</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">	at com.cmos.web.controller.MyThread.run(MyThread.java:18)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="废弃的方法"><a href="#废弃的方法" class="headerlink" title="废弃的方法"></a>废弃的方法</h2><ol>
<li>stop()、resume()、suspend()：这些方法不建议使用<ol>
<li>因为如果强制让线程停止则有可能使一些请理性的工作得不到完成</li>
<li>对锁定的对象进行解锁，导致数据得不到同步的处理，出现数据不一致的问题</li>
</ol>
</li>
</ol>
<h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ol>
<li>线程的优先级越高则获得到的CPU资源越多，但是不一定高优先级的进程一定能获得更多的CPU资源。</li>
<li>优先级分为1～10，默认为5</li>
<li>setPriority()方法设置线程的优先级</li>
<li>继承性<ol>
<li>比如A线程启动B线程，则B线程的优先级与A线程是一样的。</li>
</ol>
</li>
</ol>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><ol>
<li>Java线程分为两种，一种是用户线程，一种是守护线程。</li>
<li>当进程中不存在用户线程，则守护线程也会自动销毁。</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>java并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程核心编程三</title>
    <url>/2021/02/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E4%B8%89/</url>
    <content><![CDATA[<h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><h3 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h3><ol>
<li><p>wait()：使当前执行代码的线程进行等待，wait()方法是Object类的方法。</p>
<ol>
<li>在调用wait()方法之前，线程必须获得该对象的对象级别锁，即在同步方法或同步块中调用。</li>
<li>调用wait()方法之后，线程会释放锁。</li>
</ol>
</li>
<li><p>notify()：通知那些等待对象锁的线程。notify()方法是Object类的方法。</p>
<ol>
<li>在调用notify()方法之前，线程必须获得该对象的对象级别锁，即在同步方法或同步块中调用。</li>
<li>调用notify()方法之后，当前线程不会马上释放该对象锁，而是等退出了同步代码块之后，才释放锁，而呈wait状态的线程会开始争抢锁。</li>
</ol>
</li>
<li><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;wait begin = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;wait end = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Object lock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;notify begin = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            lock.notify();</span><br><span class="line">            System.out.println(<span class="string">&quot;notify end = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(lock);</span><br><span class="line">        threadA.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(lock);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wait begin = <span class="number">1614565730549</span></span><br><span class="line">notify begin = <span class="number">1614565732550</span></span><br><span class="line">notify end = <span class="number">1614565732550</span></span><br><span class="line">wait end = <span class="number">1614565732551</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以看到，wait方法被暂停了，直到2秒后被notify唤醒，并且notify访问执行结束后才执行wait方法后面的代码。</p>
</li>
</ol>
<h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><ol>
<li>可运行状态：<ol>
<li>新建一个新的线程对象，new Thread()，此时线程处于Runnable(可运行)状态。</li>
</ol>
</li>
<li>运行状态：<ol>
<li>CPU分配资源到这个线程，则被调用就进入了运行状态。</li>
</ol>
</li>
<li>阻塞状态：<ol>
<li>CPU时间片分配给其他线程，这时称为阻塞状态。</li>
</ol>
</li>
<li>死亡状态：<ol>
<li>线程运行结束，释放锁资源。</li>
</ol>
</li>
</ol>
<h3 id="方法join的使用"><a href="#方法join的使用" class="headerlink" title="方法join的使用"></a>方法join的使用</h3>]]></content>
      <tags>
        <tag>java</tag>
        <tag>java并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程核心编程二</title>
    <url>/2021/02/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="对象及变量的并发访问"><a href="#对象及变量的并发访问" class="headerlink" title="对象及变量的并发访问"></a>对象及变量的并发访问</h1><h2 id="synchronized同步方法"><a href="#synchronized同步方法" class="headerlink" title="synchronized同步方法"></a>synchronized同步方法</h2><ol>
<li><p>非线程安全：</p>
<ol>
<li>多个线程对同一个对象中的实例变量进行并发访问时产生的。</li>
</ol>
</li>
<li><p>方法内的变量是线程安全</p>
<ol>
<li>如果变量是方法内部的私有变量，则不存在线程安全的问题。</li>
<li>举例：方法内部的变量</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            num = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;A is over&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num = <span class="number">200</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;B is over&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; num= &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method.test(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method.test(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(method);</span><br><span class="line">        threadA.start();</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(method);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A is over</span><br><span class="line">B is over</span><br><span class="line">B num= <span class="number">200</span></span><br><span class="line">A num= <span class="number">100</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可见方法内部的变量不存在非线程安全问题，永远都是线程安全的。</li>
</ol>
</li>
<li><p>实例变量非线程安全</p>
<ol>
<li>如果多个线程共同访问1个对象中的实例变量，则有可能出现非线程安全问题。</li>
<li>举例：实例变量（其它代码如上）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            num = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;A is over&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num = <span class="number">200</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;B is over&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; num= &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A is over</span><br><span class="line">B is over</span><br><span class="line">B num= <span class="number">200</span></span><br><span class="line">A num= <span class="number">200</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可以看到test方法没有同步修饰并且两个线程操作业务对象中的实例变量，出现了非线程安全问题。</li>
<li>解决方法：synchronized修饰（其它代码如上）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            num = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;A is over&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num = <span class="number">200</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;B is over&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; num= &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A is over</span><br><span class="line">A num= <span class="number">100</span></span><br><span class="line">B is over</span><br><span class="line">B num= <span class="number">200</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>从打印可以看到两个线程顺序进入synchronized修饰的方法，确保了安全。</li>
</ol>
</li>
<li><p>多个对象多个锁</p>
<ol>
<li>关键字synchronized取得的锁都是对象锁，而不是把一段代码或方法当作锁。所以造成了异步执行。</li>
<li>举例说明：（其它代码如上）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            num = <span class="number">100</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;A is over&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            num = <span class="number">200</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;B is over&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; num= &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method methodA = <span class="keyword">new</span> Method();</span><br><span class="line">        Method methodB = <span class="keyword">new</span> Method();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(methodA);</span><br><span class="line">        threadA.start();</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(methodB);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A is over</span><br><span class="line">B is over</span><br><span class="line">B num= <span class="number">200</span></span><br><span class="line">A num= <span class="number">200</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>因此需要牢牢记住“共享”这个概念，只有共享资源的读写访问才需要同步化，如果不是共享资源，那么根本没有同步的必要。</li>
<li>A线程持有object对象的lock锁，B线程可以以异步的方式调用object对象中非synchronized类型的方法，也就是异步。</li>
<li>A线程持有object对象的lock锁，B线程这时候如果调用object对象中的synchronized类型的方法则需要等待，也就是同步。</li>
</ol>
</li>
<li><p>synchronized锁重入</p>
<ol>
<li>当一个线程得到一个对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的。</li>
<li>举例说明：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;methodA start&quot;</span>);</span><br><span class="line">        methodB();</span><br><span class="line">        System.out.println(<span class="string">&quot;methodA end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;methodB start&quot;</span>);</span><br><span class="line">        methodC();</span><br><span class="line">        System.out.println(<span class="string">&quot;methodB end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;methodC start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;methodC end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        method.methodA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA();</span><br><span class="line">        threadA.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">methodA start</span><br><span class="line">methodB start</span><br><span class="line">methodC start</span><br><span class="line">methodC end</span><br><span class="line">methodB end</span><br><span class="line">methodA end</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可重入锁的概念就是，自己可以再次获取自己内部锁，并且可重入锁也支持在父子类继承环境中使用。</li>
</ol>
</li>
</ol>
<h3 id="synchronized同步语句块"><a href="#synchronized同步语句块" class="headerlink" title="synchronized同步语句块"></a>synchronized同步语句块</h3><ol>
<li><p>当一个方法运行比较耗时，并且方法内部并不是都需要同步，则可以采用同步代码块。</p>
</li>
<li><p>synchronized同步代码块的使用</p>
<ol>
<li>当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程被执行。</li>
<li>举例说明：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;begin = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;end = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        ThreadA threadA = <span class="keyword">new</span> ThreadA(method);</span><br><span class="line">        threadA.start();</span><br><span class="line">        ThreadB threadB = <span class="keyword">new</span> ThreadB(method);</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">begin = <span class="number">1614241063700</span></span><br><span class="line">end = <span class="number">1614241065703</span></span><br><span class="line">begin = <span class="number">1614241065703</span></span><br><span class="line">end = <span class="number">1614241067705</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>从上述可以看到，虽然方法被同步代码块给锁定了，但是效率并没有提高。因为我们的代码很简单，如果碰到复杂的方法，只需要把需要锁定的代码放入代码块内，其余的代码不会受到影响。</li>
</ol>
</li>
<li><p>将任意对象作为对象监视器</p>
<ol>
<li>对其它synchronized同步方法或synchronized(this)同步代码块调用呈阻塞状态</li>
<li>同一时间只有一个线程可以执行synchronized同步方法或synchronized(this)同步代码块中的代码</li>
<li>使用synchronized(非this对象x)同步代码块进行同步操作，对象监视器必须是同一个对象。</li>
<li>使用synchronized(class)同步代码块会应用到static静态方法上，相当于对*.java文件内的所有方法都进行持锁。</li>
<li>使用synchronized(class)静态同步代码块和synchronized(this)同步代码块，则会异步执行，一个是Class锁，一个是对象锁。</li>
<li>使用synchronized(class)静态代码块和synchronized静态方法的效果是一样的。</li>
<li>使用String作为同步锁，要注意JVM对String类型有常量池进行缓存，尽可能改用其它锁对象。</li>
</ol>
</li>
</ol>
<h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><ol>
<li>主要作用是使变量在多个线程间可见。</li>
</ol>
<h3 id="volatile和死循环"><a href="#volatile和死循环" class="headerlink" title="volatile和死循环"></a>volatile和死循环</h3><ol>
<li><p>volatile的主要作用是使变量在多个线程间可见。</p>
</li>
<li><p>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">              	System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        method.method();</span><br><span class="line">        method.setFlag(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">method</span><br><span class="line">method</span><br><span class="line">method</span><br><span class="line">method</span><br></pre></td></tr></table></figure>

<ol>
<li>发现该方法一直处于while循环，导致程序不能继续执行后面的代码。</li>
</ol>
</li>
<li><p>解决同步死循环</p>
<ol>
<li><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method method = <span class="keyword">new</span> Method();</span><br><span class="line">        <span class="keyword">new</span> Thread(method).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;I want this stop&quot;</span>);</span><br><span class="line">        method.setFlag(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">I want <span class="keyword">this</span> stop</span><br><span class="line">method</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>上述方法运行在-server服务器模式中64bit的JVM上时会出现死循环，因为flag存在与公共堆栈及线程的私有堆栈中，-server模式时JVM为了线程运行的效率，线程一直在私有堆栈中取得flag的值是true，所有会造成死循环，建议采用volatile。</p>
</li>
</ol>
</li>
<li><p>使用volatile解决死循环</p>
<ol>
<li><p>使用volatile强制从公共堆栈中取得变量的值，而不是从线程私有数据栈中取得变量的值。</p>
</li>
<li><p>举例说明：（其它代码如上）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>synchronized和volatile比较：</p>
<ol>
<li>volatile是线程同步的轻量级实现，性能略高于synchronized，并且volatile只能修饰变量，二synchronized可以修饰方法和代码块。</li>
<li>多线程访问volatile不会造成阻塞，synchronized会出现阻塞。</li>
<li>volatile保证数据的可见性，但不保证原子性；synchronized保证原子性的同时也保证可见性，因为它将私有内存和公共内存中的数据做同步。</li>
<li>volatile解决的是变量在多个线程之间的可见性，synchronized解决的是多个线程之间访问资源的同步性。</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>java并发</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据之Hadoop</title>
    <url>/2021/03/02/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BHadoop/</url>
    <content><![CDATA[<h1 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h1><ol>
<li>指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</li>
<li>数据存储单位<ol>
<li>bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB</li>
<li>目前大公司数据量在EB</li>
</ol>
</li>
<li>主要解决海量数据的采集、存储和分析计算。</li>
</ol>
<h2 id="大数据特点（4V）"><a href="#大数据特点（4V）" class="headerlink" title="大数据特点（4V）"></a>大数据特点（4V）</h2><h3 id="Volume（大量）"><a href="#Volume（大量）" class="headerlink" title="Volume（大量）"></a>Volume（大量）</h3><ol>
<li>一些大企业数据流接近EB量级</li>
</ol>
<h3 id="Velocify（高速）"><a href="#Velocify（高速）" class="headerlink" title="Velocify（高速）"></a>Velocify（高速）</h3><ol>
<li>数据产生的速度非常快，像天猫双十一。</li>
</ol>
<h3 id="Variety（多样）"><a href="#Variety（多样）" class="headerlink" title="Variety（多样）"></a>Variety（多样）</h3><ol>
<li>数据分为结构化（数据库/文本为主的数据）和非结构化数据（网络日志、音频、视频、地理信息等）。</li>
</ol>
<h3 id="Value（低价值密度）"><a href="#Value（低价值密度）" class="headerlink" title="Value（低价值密度）"></a>Value（低价值密度）</h3><ol>
<li>快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</li>
</ol>
<h2 id="大数据应用场景"><a href="#大数据应用场景" class="headerlink" title="大数据应用场景"></a>大数据应用场景</h2><ol>
<li>抖音推荐你喜欢的视频</li>
<li>电商广告推荐你喜欢的商品</li>
<li>人工智能</li>
</ol>
<h2 id="大数据发展前景"><a href="#大数据发展前景" class="headerlink" title="大数据发展前景"></a>大数据发展前景</h2><ol>
<li>党十九大提出“推动互联网、大数据、人工智能和实体经济深度融合”。</li>
<li>2020年初，中央推出34万亿“新基建”计划。</li>
</ol>
<h2 id="大数据部门间业务流程分析"><a href="#大数据部门间业务流程分析" class="headerlink" title="大数据部门间业务流程分析"></a>大数据部门间业务流程分析</h2><ol>
<li>产品人员提需求-&gt;数据部门搭建数据平台、分析数据指标-&gt;数据可视化（报表展示、邮件发送、大屏幕展示等）</li>
</ol>
<h2 id="大数据部门内组织结构"><a href="#大数据部门内组织结构" class="headerlink" title="大数据部门内组织结构"></a>大数据部门内组织结构</h2><ol>
<li>平台组<ol>
<li>Hadoop、Flume、Kafka、HBase、Spark等框架平台搭建</li>
<li>集群性能监控</li>
<li>集群性能调优</li>
</ol>
</li>
<li>数据仓库组<ol>
<li>ETL工程师（数据清洗）</li>
<li>数据分析、数据仓库建模</li>
</ol>
</li>
<li>实时组<ol>
<li>实时指标分析、性能调优</li>
</ol>
</li>
<li>数据挖掘组<ol>
<li>算法工程师</li>
<li>推荐系统工程师</li>
<li>用户画像工程师</li>
</ol>
</li>
<li>报表开发组<ol>
<li>JavaEE工程师</li>
<li>前端工程师</li>
</ol>
</li>
</ol>
<h1 id="Hadoop入门"><a href="#Hadoop入门" class="headerlink" title="Hadoop入门"></a>Hadoop入门</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h3><ol>
<li>Hadoop是一个由Apache基金会开发的分布式系统基础架构</li>
<li>主要解决海量数据的存储和海量数据的分析计算问题</li>
<li>Hadoop通常是指一个更广泛的概念–Hadoop生态圈</li>
</ol>
<h3 id="Hadoop发展历史"><a href="#Hadoop发展历史" class="headerlink" title="Hadoop发展历史"></a>Hadoop发展历史</h3><ol>
<li>Hadoop创始人Doug Cutting，为了实现与Google类似的全文搜索功能。</li>
</ol>
<h3 id="Hadoop三大发现版本"><a href="#Hadoop三大发现版本" class="headerlink" title="Hadoop三大发现版本"></a>Hadoop三大发现版本</h3><ol>
<li>Apache版本，开源，对入门学习最好</li>
<li>Cloudera版本，内部集成了很多大数据框架，对应产品CDH</li>
<li>Hortonworks版本，文档齐全，对应产品HDP</li>
</ol>
<h3 id="Hadoop的优势"><a href="#Hadoop的优势" class="headerlink" title="Hadoop的优势"></a>Hadoop的优势</h3><ol>
<li>高可靠性：Hadoop底层维护多个数据副本，即使某个单元故障，也不会导致数据的丢失。</li>
<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>
<li>高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</li>
<li>高容错性：能够自动将失败的任务重新分配。</li>
</ol>
<h3 id="Hadoop的组成"><a href="#Hadoop的组成" class="headerlink" title="Hadoop的组成"></a>Hadoop的组成</h3><ol>
<li>Hadoop1.x<ol>
<li>Common辅助工具</li>
<li>HDFS数据存储</li>
<li>MapReduce计算+资源调度</li>
</ol>
</li>
<li>Hadoop2.x<ol>
<li>Common辅助工具</li>
<li>HDFS数据存储</li>
<li>Yarn资源调度</li>
<li>MapReduce计算</li>
</ol>
</li>
<li>Hadoop3.x<ol>
<li>在组成上没有变化</li>
</ol>
</li>
<li>HDFS架构概述<ol>
<li>Hadoop Distributed File System，是一个分布式文件系统。</li>
<li>NameNode<ol>
<li>负责数据存储情况概述</li>
</ol>
</li>
<li>DataNode<ol>
<li>负责存储具体数据</li>
</ol>
</li>
<li>2NN<ol>
<li>协助NameNode，每隔一段时间对它元数据备份</li>
</ol>
</li>
</ol>
</li>
<li>YARN架构概述<ol>
<li></li>
</ol>
</li>
</ol>
<h3 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h3><h3 id="推荐系统案例"><a href="#推荐系统案例" class="headerlink" title="推荐系统案例"></a>推荐系统案例</h3><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="模板虚拟机准备"><a href="#模板虚拟机准备" class="headerlink" title="模板虚拟机准备"></a>模板虚拟机准备</h3><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><h3 id="安装JDK、Hadoop"><a href="#安装JDK、Hadoop" class="headerlink" title="安装JDK、Hadoop"></a>安装JDK、Hadoop</h3><h2 id="Hadoop生产集群搭建"><a href="#Hadoop生产集群搭建" class="headerlink" title="Hadoop生产集群搭建"></a>Hadoop生产集群搭建</h2><h3 id="本地模式"><a href="#本地模式" class="headerlink" title="本地模式"></a>本地模式</h3><h3 id="完全分布式集群"><a href="#完全分布式集群" class="headerlink" title="完全分布式集群"></a>完全分布式集群</h3><h2 id="常见错误解决方案"><a href="#常见错误解决方案" class="headerlink" title="常见错误解决方案"></a>常见错误解决方案</h2>]]></content>
      <tags>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea工具开发 SpringBoot整合JSP（毕设亲测可用）</title>
    <url>/2021/02/24/Idea%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-SpringBoot%E6%95%B4%E5%90%88JSP%EF%BC%88%E6%AF%95%E8%AE%BE%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8%EF%BC%89/</url>
    <content><![CDATA[<p>因为，临近毕业了，自己虽然也学了很多框架。但是，都是在别人搭建好的基础上进行项目开发。但是springboot的官方文档上明确指出不提倡使用jsp进行前端开发，但是在校期间只学了jsp作为前端页面。所以，废话不多说，先上项目结构图。</p>
<ol>
<li><p>结构图:</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312203927840-140916812.png"></p>
</li>
<li><p>先跟大家说下项目结构：</p>
</li>
<li><p>webapp主要是用来放jsp页面的。</p>
</li>
<li><p>最下方的web文件夹是通过idea软件来生成的，自己不需要改变.</p>
</li>
</ol>
<p>那就跟着博主一起来搭建一遍。</p>
<ol start="3">
<li>先file -&gt; new -&gt; project</li>
</ol>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312204337821-123405519.png"></p>
<ol start="4">
<li><p>然后可以选择Spring Initializr或者直接一个Empty Project都可以来建web项目。这里我们为了方便就使用Spring Initializr来建SpringBoot的项目。</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312204352051-210383801.png"></p>
</li>
<li><p>之后就是next 这里需要注意一点。packaging的格式一定要采用War的形式。因为jsp只支持War包。</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312204449768-175824184.png"></p>
</li>
<li><p>然后继续next 这里我们选择一个web，因为是一个web的项目 所以就先打勾勾了，其它的myBatis，我们可以在后期通过pom.xml文件进行添加。</p>
</li>
<li><p>然后选择SpringBoot的版本为1.5.10 现在的2.0刚出来。怕不稳定</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312204724208-1672962843.png"></p>
</li>
<li><p>然后 就是next和finish。</p>
</li>
<li><p>这是通过第一步创建出来的项目结构图</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312204859347-607098786.png"></p>
</li>
<li><p>TestApplication是SpringBoot的启动类。但是由于没有配置数据源，所以需要在启动类上面添加一个去除数据源的注解</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205039043-2139971107.png"></p>
</li>
<li><p>ServletInitializer是继承自Servlet的类，如果嫌2个类太麻烦，可以将TestApplication继承自SpringBootServletInitializer</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205208375-348061265.png"></p>
</li>
<li><p>改成为一个类之后是这样的。</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205246616-1147477127.png"></p>
</li>
<li><p>在main文件夹下面创建一个webapp。然后在webapp下创建一个WEB-INF，再在WEB-INF下创建jsp文件夹。在jsp里面建一个index.jsp文件。项目结构如下</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205453548-624879244.png"></p>
</li>
<li><p>在com.fangke这个包下面创建一个controller作为访问之前index.jsp的入口。</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205737109-1492406864.png"></p>
</li>
<li><p>TestController里面的内容为</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312205836679-1045696902.png"></p>
</li>
<li><p>然后在application.properties文件里写访问资源路径 这里的.jsp为后缀</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312211018408-791251372.png"></p>
</li>
<li><p>到这一步，还是不能运行这个项目，会报404找不到页面，但是已经可以进入index()这个方法了。接下来，我们需要选择file -&gt; project structure</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210119081-616667124.png"></p>
</li>
<li><p>然后选择web</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210154298-1232759051.png"></p>
</li>
<li><p>如果没有web的话。可以点加号。添加一个web</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210231129-1283738131.png"></p>
</li>
<li><p>接下来就是分别配置Deployment Descriptors和Web Resource Directories</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210331021-399420468.png"></p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210343100-608873049.png"></p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312210404711-1870050616.png"></p>
</li>
<li><p>我们需要向pom.xml文件中加入servlet依赖包以及tomcat依赖包和之前提到的myBatis的依赖包……（直接上图）</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fangke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring-cloud.verson</span>&gt;</span>Dalston.SR4<span class="tag">&lt;/<span class="name">spring-cloud.verson</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- servlet 依赖包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- JSTL (JSP standard Tag Library) JSP 标准标签库 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--加密字符--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="22">
<li><p>启动这个项目，然后浏览器访问localhost:8080/index 就可以访问了（加一句静态资源需要放在resources下的static文件夹下）</p>
<p><img src="https://images2018.cnblogs.com/blog/1265109/201803/1265109-20180312211102046-1302478122.png"></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>框架搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据之Shell</title>
    <url>/2021/03/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8BShell/</url>
    <content><![CDATA[<h2 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h2><ol>
<li>需要看懂运维人员编写的Shell程序。</li>
<li>需要编写一些简单Shell程序来管理集群，提高开发效率。</li>
<li>Shell是一个命令行解释器，接受应用程序命令，调用系统内核。</li>
</ol>
<h2 id="Shell解析器"><a href="#Shell解析器" class="headerlink" title="Shell解析器"></a>Shell解析器</h2><ol>
<li><p>linux提供的Shell解析器有：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure>
</li>
<li><p>bash和sh的关系</p>
<ol>
<li>其实就是一个软连接</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll | grep bash</span><br><span class="line"></span><br><span class="line">sh -&gt; bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>centos默认的解析器是bash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Shell脚本入门"><a href="#Shell脚本入门" class="headerlink" title="Shell脚本入门"></a>Shell脚本入门</h2><ol>
<li><p>脚本格式</p>
<ol>
<li>脚本以<code>#!/bin/bash</code>开头（指定解析器）</li>
</ol>
</li>
<li><p>第一个Shell脚本：helloworld</p>
<ol>
<li>创建文件<code> touch helloworld.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &#x27;hello world&#x27;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行脚本 <code>sh helloworld.sh</code></li>
</ol>
</li>
<li><p>第二个Shell脚本：在/home/foreign/datas目录下创建banzhang.txt，在banzhang.txt文件中加“I Love Coder”</p>
<ol>
<li>创建文件 <code>touch batch.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /home/foreign/datas</span><br><span class="line"></span><br><span class="line">touch banzhang.txt</span><br><span class="line"></span><br><span class="line">echo &quot;I Love Coder&quot; &gt;&gt; banzhang.txt</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行脚本 <code>sh batch.sh</code></li>
</ol>
</li>
</ol>
<h2 id="Shell中的变量"><a href="#Shell中的变量" class="headerlink" title="Shell中的变量"></a>Shell中的变量</h2><ol>
<li><p>自定义变量（等号两侧不能有空格、环境变量名建议大写）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A=2</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行变量 <code>echo $A</code></li>
</ol>
</li>
<li><p>撤销变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset A</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明静态变量（不能unset）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readonly B=3</span><br></pre></td></tr></table></figure>
</li>
<li><p>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">A=1+1</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>输出变量 <code>echo $A</code> 结果还是1+1</li>
</ol>
</li>
<li><p>变量的值如果有空格，需要双引号或单引号括起来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D=&#x27; banzhang love mm&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li><p>把变量提升为全局环境变量，可供其他Shell程序使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D=&#x27;aaaa ss&#x27;</span><br><span class="line">export D</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建bash文件 <code>touch test.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $D</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>采用export提升为全局环境变量，这样就可以在test.sh文件中使用D的变量。</li>
</ol>
</li>
</ol>
<h2 id="特殊变量：-n"><a href="#特殊变量：-n" class="headerlink" title="特殊变量：$n"></a>特殊变量：$n</h2><ol>
<li><p>基本语法</p>
<ol>
<li>$n（功能描述：n为数字，$0代表该脚本名称，$1-9代表第一到第九个参数，十以上的参数需要大括号包含，如${10}）</li>
</ol>
</li>
<li><p>实操</p>
<ol>
<li>创建脚本 <code>touch parameter.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0 $1 $2 $3&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行 <code>sh parameter.sh banzhang 1 2</code> 结果 <code>parameter.sh banzhang 1 2</code> </li>
</ol>
</li>
</ol>
<h2 id="特殊变量："><a href="#特殊变量：" class="headerlink" title="特殊变量：$#"></a>特殊变量：$#</h2><ol>
<li><p> $# （功能描述：获取所有输入参数个数，常用于循环）</p>
</li>
<li><p>实操</p>
<ol>
<li>创建脚本 <code>touch parameter.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0 $1 $2 $3&quot;</span><br><span class="line">echo $#</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>运行脚本<code>sh parameter.sh banzhang 1 2</code> </p>
</li>
<li><p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">parameter.sh banzhang 1 2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="特殊变量：-、"><a href="#特殊变量：-、" class="headerlink" title="特殊变量：$*、$@"></a>特殊变量：$*、$@</h2><ol>
<li><p>$*（功能描述：这个变量代表命令行中所有的参数，它把所有的参数看成一个整体）</p>
</li>
<li><p>$@（功能描述：这个变量也代表命令行中所有的参数，它把每个参数区分对待）</p>
</li>
<li><p>实操</p>
<ol>
<li>创建脚本 <code>touch parameter.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0 $1 $2 $3&quot;</span><br><span class="line">echo $#</span><br><span class="line">echo $*</span><br><span class="line">echo $@</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>运行脚本<code>sh parameter.sh banzhang 1 2</code> </p>
</li>
<li><p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">parameter.sh banzhang 1 2</span><br><span class="line">3</span><br><span class="line">banzhang 1 2</span><br><span class="line">banzhang 1 2</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="特殊变量：-1"><a href="#特殊变量：-1" class="headerlink" title="特殊变量：$?"></a>特殊变量：$?</h2><ol>
<li>$?（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上次命令正确，如果为非0，证明上次命令执行不正确）</li>
<li>实操<ol>
<li>执行命令 <code>sh parameter.sh banzhang 1 2</code></li>
<li>执行命令 <code>echo $?</code></li>
<li>返回结果 0</li>
</ol>
</li>
</ol>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li>$((运算式)) 或 $[运算式]<ol>
<li>运行 <code>s=$[(2+3)*4]</code></li>
</ol>
</li>
<li>expr +,-,*,/,% 分别代表 加，减，乘，除，取余<ol>
<li>expr运算符间要有空格</li>
<li>运行 <code>expr 3 + 2</code></li>
</ol>
</li>
</ol>
<h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li>[ condition ] （主要 condition前后要有空格<ol>
<li>条件非空即为true，[ foreign ]返回true，[ ] 返回false</li>
</ol>
</li>
</ol>
<h3 id="常用判断条件"><a href="#常用判断条件" class="headerlink" title="常用判断条件"></a>常用判断条件</h3><ol>
<li>两个整数之间比较<ol>
<li><code>-lt</code> 小于（less than）</li>
<li><code>-le</code> 小于等于（less equal）</li>
<li><code>-eq</code> 等于（equal）</li>
<li><code>-gt</code> 大于（greater than）</li>
<li><code>-ge</code> 大于等于（greater than）</li>
<li><code>-ne</code> 不等于（not equal）</li>
</ol>
</li>
<li>按照文件权限进行判断<ol>
<li><code>-r</code> 有读的权限（read）</li>
<li><code>-w</code> 有写的权限（write）</li>
<li><code>-x</code> 有执行的权限（execute）</li>
</ol>
</li>
<li>按照文件类型进行判断<ol>
<li><code>-f</code>文件存在并且是一个常规的文件（file）</li>
<li><code>-e</code>文件存在（existence）</li>
<li><code>-d</code>文件存在并且是一个目录（directory）</li>
</ol>
</li>
</ol>
<h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><ol>
<li>判断23是否大于等于22 <code>[ 23 -ge 22 ]</code> ，查看对错 <code>echo $?</code></li>
<li>判断文件是否有写权限 [ -w parameter.sh ]</li>
<li>判断/home/foerign/datas/parameter.sh是否存在该文件<ol>
<li>[ -e /home/foreign/datas/parameter.sh ]</li>
</ol>
</li>
<li>多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败，才执行下一条命令）<ol>
<li><code>[ condition ] &amp;&amp; echo OK || echo NOTOK</code><ol>
<li>输出OK</li>
</ol>
</li>
<li><code>[ condition ] &amp;&amp; [ ] || ehco NOTOK</code><ol>
<li>输出NOTOK</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><h4 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line">	程序</span><br><span class="line">fi</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line">if [ 条件判断式 ]</span><br><span class="line">	then</span><br><span class="line">		程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h4 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h4><ol>
<li><p>输入一个数字，如果是1，则输出 banzhang zhen shuai；如果是2，则输出foreign zhen shuai；如果是其它，什么也不输出</p>
</li>
<li><p>创建文件 <code>touch if.sh</code></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $1 eq 1 ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;banzhang zhen shuai&quot;</span><br><span class="line">elif [ $1 eq 2 ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;foreign zhen shuai&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><h4 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">	&quot;值1&quot;)</span><br><span class="line">		如果变量的值等于1，则执行程序1</span><br><span class="line">		;;</span><br><span class="line">	&quot;值2&quot;)</span><br><span class="line">		如果变量的值等于2，则执行程序2</span><br><span class="line">		;;</span><br><span class="line">		...省略其它分支...</span><br><span class="line">	*)</span><br><span class="line">		如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">		;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h4 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h4><ol>
<li>输入一个数字，如果是1，则输出banzhang，如果是2，则输出foreign，如果是其它，则输出other</li>
<li>创建文件 touch case.sh</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">	1)</span><br><span class="line">		echo &quot;banzhang&quot;</span><br><span class="line">		;;</span><br><span class="line">	2)</span><br><span class="line">		echo &quot;foreign&quot;</span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		echo &quot;other&quot;</span><br><span class="line">		;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="基本语法1"><a href="#基本语法1" class="headerlink" title="基本语法1"></a>基本语法1</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ((初始值;循环控制条件;变量变化))</span><br><span class="line">	do</span><br><span class="line">		程序</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>

<h4 id="实操-3"><a href="#实操-3" class="headerlink" title="实操"></a>实操</h4><ol>
<li>从1加到100</li>
<li>创建文件 <code>touch for.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">s=0</span><br><span class="line">for ((i=1; i&lt;=100;i++))</span><br><span class="line">	do</span><br><span class="line">		s=$[$s+$i]</span><br><span class="line">  done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure>

<h4 id="基本语法2"><a href="#基本语法2" class="headerlink" title="基本语法2"></a>基本语法2</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3...</span><br><span class="line">	do</span><br><span class="line">		程序</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>

<h4 id="实操-4"><a href="#实操-4" class="headerlink" title="实操"></a>实操</h4><ol>
<li>打印所有输入参数</li>
<li>创建文件 <code>touh for2.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in $*</span><br><span class="line">	do</span><br><span class="line">		echo &quot;foreign $i&quot;</span><br><span class="line">	done</span><br><span class="line">echo &quot;---------分割线---------&quot;</span><br><span class="line">for i in $@</span><br><span class="line">	do</span><br><span class="line">		echo &quot;foreign $i&quot;</span><br><span class="line">	done</span><br><span class="line">echo &quot;---------分割线---------&quot;</span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">	do</span><br><span class="line">		echo &quot;foreign $i&quot;</span><br><span class="line">	done</span><br><span class="line">echo &quot;---------分割线---------&quot;</span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">	do</span><br><span class="line">		echo &quot;foreign $i&quot;</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>调用 <code>sh for2.sh 1 2 3</code> </p>
</li>
<li><p>结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">foreign 1</span><br><span class="line">foreign 2</span><br><span class="line">foreign 3</span><br><span class="line">---------分割线---------</span><br><span class="line">foreign 1</span><br><span class="line">foreign 2</span><br><span class="line">foreign 3</span><br><span class="line">---------分割线---------</span><br><span class="line">foreign 1 2 3</span><br><span class="line">---------分割线---------</span><br><span class="line">foreign 1</span><br><span class="line">foreign 2</span><br><span class="line">foreign 3</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">	do</span><br><span class="line">		程序</span><br><span class="line">	done</span><br></pre></td></tr></table></figure>

<h4 id="实操-5"><a href="#实操-5" class="headerlink" title="实操"></a>实操</h4><ol>
<li>从1加到100</li>
<li>创建文件 <code>touch while.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">s=0</span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">	do</span><br><span class="line">		s=$[$i+$s]</span><br><span class="line">		i=$[$i+1]</span><br><span class="line">	done</span><br><span class="line">echo $s</span><br></pre></td></tr></table></figure>

<h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><h4 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h4><ol>
<li>选项：<ol>
<li>-p：指定读取值时的提示符</li>
<li>-t：指定读取值时等待的时间（秒）</li>
</ol>
</li>
<li>参数：<ol>
<li>变量：指定读取值的变量名</li>
</ol>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read(选项)(参数)</span><br></pre></td></tr></table></figure>

<h4 id="实操-6"><a href="#实操-6" class="headerlink" title="实操"></a>实操</h4><ol>
<li>提示7秒内，读取控制台输入的名称</li>
<li>创建文件 <code>touch read.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -t 7 -p &quot;Enter your name in 7 seconds &quot; NAME</span><br><span class="line">echo $NAME</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><h4 id="basename基本语法"><a href="#basename基本语法" class="headerlink" title="basename基本语法"></a>basename基本语法</h4><ol>
<li>basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个(‘/’)字符，然后将字符串显示出来<ol>
<li>suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉</li>
</ol>
</li>
</ol>
<h4 id="实操-7"><a href="#实操-7" class="headerlink" title="实操"></a>实操</h4><ol>
<li>截取该 <code>/home/foreign/datas/banzhang.txt</code> 路径的文件名称</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">basename /home/foreign/datas/banzhang.txt .txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>结果 <code>banzhang</code></li>
</ol>
<h4 id="dirname基本语法"><a href="#dirname基本语法" class="headerlink" title="dirname基本语法"></a>dirname基本语法</h4><ol>
<li>dirname 文件绝对路径（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分）），然后返回剩下的路径（目录部分）。</li>
</ol>
<h4 id="实操-8"><a href="#实操-8" class="headerlink" title="实操"></a>实操</h4><ol>
<li>获取banzhang.txt文件的路径</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname /home/foreign/datas/banzhang.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>结果 <code>/home/foreign/datas</code></li>
</ol>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><h4 id="基本语法-6"><a href="#基本语法-6" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">	Action;</span><br><span class="line">	[return int;]</span><br><span class="line">&#125;</span><br><span class="line">funname</span><br></pre></td></tr></table></figure>

<h4 id="经验技巧"><a href="#经验技巧" class="headerlink" title="经验技巧"></a>经验技巧</h4><ol>
<li>必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。</li>
<li>函数返回值，只能通过$?系统变量获得，可以显示加 return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255)</li>
</ol>
<h4 id="实操-9"><a href="#实操-9" class="headerlink" title="实操"></a>实操</h4><ol>
<li>计算两个输入参数的和</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">	s=0;</span><br><span class="line">	s=$[$1+$2]</span><br><span class="line">	echo $s</span><br><span class="line">&#125;</span><br><span class="line">read -p &quot;input your parameter1:&quot; p1</span><br><span class="line">read -p &quot;input your parameter2:&quot; p2</span><br><span class="line">sum $p1 $p2</span><br></pre></td></tr></table></figure>

<h2 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><ol>
<li>具体的说就是在文件中负责剪切数据，cut命令从文件的每一行剪切字节、字符和字段并将这些字段、字符输出。</li>
</ol>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ol>
<li>cut [选项参数] filename</li>
<li>选项参数<ol>
<li>-f：列号，提取第几列</li>
<li>-d：分隔符，按照指定分隔符分隔列（默认为制表符）</li>
</ol>
</li>
</ol>
<h4 id="实操-10"><a href="#实操-10" class="headerlink" title="实操"></a>实操</h4><ol>
<li>数据准备</li>
<li>创建文件 <code>cut.sh</code> 并写入数据</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo wo</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>切割第一列</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -d &quot; &quot; -f 1 cut.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>切割出guan</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat cut.sh | grep guan | cut -d &quot; &quot; -f 1</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>选取系统PATH变量值，第2个“ ：”开始后的所有路径</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH | cut -d : -f 3-</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>切割ifconfig后打印的IP地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 | grep &quot;inet addr&quot; | cut -d : -f2 | cut -d &quot; &quot; -f 1</span><br></pre></td></tr></table></figure>

<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><ol>
<li>是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着使用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</li>
</ol>
<h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed [选项参数] &#x27;command&#x27; filename</span><br></pre></td></tr></table></figure>

<ol>
<li>选项参数说明</li>
</ol>
<table>
<thead>
<tr>
<th align="center">选项参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-e</td>
<td align="center">直接在指令模式上进行sed的动作编辑</td>
</tr>
</tbody></table>
<ol start="2">
<li>命令功能描述</li>
</ol>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">新增，a的后面可以接字串，在下一行出现</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">删除</td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">查找并替换</td>
</tr>
</tbody></table>
<h4 id="实操-11"><a href="#实操-11" class="headerlink" title="实操"></a>实操</h4><ol>
<li>数据准备 <code>sed.txt</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo wo </span><br><span class="line">lai lai</span><br><span class="line">le le</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将 <code>mei nv</code> 这个单词插入到sed.txt第二行下，打印</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed &quot;2a mei nv&quot; sed.txt</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除sed.txt文件中所有包含wo的行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed &quot;/wo/d&quot; sed.txt</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将sed.txt文件中wo 替换为 ni</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed &quot;s/wo/ni/g&quot; sed.txt</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>将sed.txt文件中的第二行删除并将wo替换为ni</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -e &quot;2d&quot; -e &quot;/s/wo/ni/g&quot; sed.txt</span><br></pre></td></tr></table></figure>

<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><ol>
<li>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</li>
</ol>
<h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk [选项参数] &#x27;pattern1&#123;action1&#125; pattern2&#123;action2&#125; ...&#x27; filename</span><br><span class="line">patterns: 表示AWK在数据中查找的内容，就是匹配模式</span><br><span class="line">action：在找到匹配内容时所执行的一系列命令</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>选项参数说明</li>
</ol>
<table>
<thead>
<tr>
<th align="center">选项参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-F</td>
<td align="center">指定输入文件拆分隔符</td>
</tr>
<tr>
<td align="center">-v</td>
<td align="center">赋值一个用户定义变量</td>
</tr>
</tbody></table>
<h4 id="实操-12"><a href="#实操-12" class="headerlink" title="实操"></a>实操</h4><ol>
<li>数据准备,拷贝passwd到当前目录下 <code>sudo cp /etc/passwd ./</code></li>
<li>搜索passwd文件以root关键字开头的所有行，并输出该行的第7列</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F : &#x27;/^root/&#123;print $7&#125;&#x27; passwd</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名user,shell 在最后一行添加”foreign, /bin/zuishuai”</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F : &#x27;BEGIN&#123;print &quot;user,shell&quot;&#125; &#123;print $1 $7&#125; END&#123;print &quot;foreign, bin/zuishuai&quot;&#125;&#x27; passwd</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将passwd文件中的用户id增加数值1并输出</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F : -v i=1 &#x27;&#123;print $3&#125;&#x27; passwd</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ol>
<li>sort命令可以将文件进行排序，并将结果标准输出。</li>
</ol>
<h4 id="基本语法-7"><a href="#基本语法-7" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort (选项)(参数)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-n</td>
<td align="center">依照数值的大小排序</td>
</tr>
<tr>
<td align="center">-r</td>
<td align="center">以相反的顺序排序</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="center">设置排序时所用的分隔字符</td>
</tr>
<tr>
<td align="center">-k</td>
<td align="center">指定需要排序的列</td>
</tr>
</tbody></table>
<ol start="3">
<li>参数：指定待排序的文件列表</li>
</ol>
<h4 id="实操-13"><a href="#实操-13" class="headerlink" title="实操"></a>实操</h4><ol>
<li>数据准备 <code>touch sort.sh</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">xz:50:2.3</span><br><span class="line">cls:10:3.5</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将第二列排序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sort -t : -nrk 2 sort.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>大数据</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
</search>
